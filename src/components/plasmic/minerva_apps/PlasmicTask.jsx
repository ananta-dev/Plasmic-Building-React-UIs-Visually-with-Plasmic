// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rP5KxAshUTdmscUyP4SP8d
// Component: eOeMAL5zug
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_minerva_apps.module.css"; // plasmic-import: rP5KxAshUTdmscUyP4SP8d/projectcss
import sty from "./PlasmicTask.module.css"; // plasmic-import: eOeMAL5zug/css
import imageFjY9Bwr8U from "./images/image.png"; // plasmic-import: fjY9bwr8U/picture

export const PlasmicTask__VariantProps = new Array("states");

export const PlasmicTask__ArgProps = new Array("children");

function PlasmicTask__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__lgW4W, {
          [sty.freeBoxstates_completed__lgW4WbFbqb]: hasVariant(
            variants,
            "states",
            "completed"
          ),

          [sty.freeBoxstates_highPriority__lgW4W0Sj2]: hasVariant(
            variants,
            "states",
            "highPriority"
          )
        })}
      >
        {(hasVariant(variants, "states", "completed") ? true : false) ? (
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgstates_completed]: hasVariant(
                variants,
                "states",
                "completed"
              )
            })}
            displayHeight={"16px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: imageFjY9Bwr8U,
              fullWidth: 129,
              fullHeight: 105,
              aspectRatio: undefined
            }}
          />
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__qILj)}>
        {p.renderPlasmicSlot({
          defaultContents: "Buy some milk",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenstates_completed]: hasVariant(
              variants,
              "states",
              "completed"
            )
          })
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTask__ArgProps,
      internalVariantPropNames: PlasmicTask__VariantProps
    });

    return PlasmicTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTask";
  } else {
    func.displayName = `PlasmicTask.${nodeName}`;
  }
  return func;
}

export const PlasmicTask = Object.assign(
  // Top-level PlasmicTask renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicTask
    internalVariantProps: PlasmicTask__VariantProps,
    internalArgProps: PlasmicTask__ArgProps
  }
);

export default PlasmicTask;
/* prettier-ignore-end */
