// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rP5KxAshUTdmscUyP4SP8d
// Component: JGQIj-gnzM
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Task from "../../Task"; // plasmic-import: eOeMAL5zug/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_minerva_apps.module.css"; // plasmic-import: rP5KxAshUTdmscUyP4SP8d/projectcss
import sty from "./PlasmicTodoApp.module.css"; // plasmic-import: JGQIj-gnzM/css

export const PlasmicTodoApp__VariantProps = new Array();

export const PlasmicTodoApp__ArgProps = new Array();

function PlasmicTodoApp__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"todos"}
      </div>

      <div
        data-plasmic-name={"tasklist"}
        data-plasmic-override={overrides.tasklist}
        className={classNames(projectcss.all, sty.tasklist)}
      >
        <Task className={classNames("__wab_instance", sty.task__jGegA)} />

        <Task
          className={classNames("__wab_instance", sty.task__nYb3)}
          states={"completed"}
        >
          {"Make todo app"}
        </Task>

        <Task className={classNames("__wab_instance", sty.task__o8ZAa)}>
          {"Give a demo"}
        </Task>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "tasklist"],
  text: ["text"],
  tasklist: ["tasklist"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTodoApp__ArgProps,
      internalVariantPropNames: PlasmicTodoApp__VariantProps
    });

    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    tasklist: makeNodeComponent("tasklist"),
    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
